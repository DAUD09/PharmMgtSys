@model List<PharmMgtSys.Models.TransactionReportViewModel>
@using DevExtreme.AspNet.Mvc.Builders
@{
    ViewBag.Title = "Transaction Report";
    var filter = ViewBag.Filter as PharmMgtSys.Models.TransactionReportFilterViewModel;
}

<h2>Transaction Report</h2>

<!-- Filter Form -->
<!--@using (Html.BeginForm("TransactionReport", "Reports", FormMethod.Get))
{
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <label class="form-label">Start Date:</label>
            @Html.TextBoxFor(m => filter.StartDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
        </div>
        <div class="col-md-3">
            <label class="form-label">End Date:</label>
            @Html.TextBoxFor(m => filter.EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
        </div>
        <div class="col-md-3 align-self-end">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </div>
}-->

<!-- Server-side Export Links -->
@*<div class="mb-3">
    @Html.ActionLink("Export to PDF", "ExportTransactionReportToPdf", "Reports",
        new { StartDate = filter.StartDate, EndDate = filter.EndDate },
        new { @class = "btn btn-primary me-2" })
    @Html.ActionLink("Export to Excel", "ExportTransactionReportToExcel", "Reports",
        new { StartDate = filter.StartDate, EndDate = filter.EndDate },
        new { @class = "btn btn-success" })
</div>*@

<!-- DevExtreme DataGrid -->
@(Html.DevExtreme().DataGrid<PharmMgtSys.Models.TransactionReportViewModel>()
    .DataSource(Model)
    .KeyExpr("Date")  // or your unique key
    .ShowBorders(true)
    .RemoteOperations(true)
    .RemoteOperations(ro => ro
    .Filtering(true)    
    .Paging(true)        
    .Sorting(true)    
    .GroupPaging(true)   
    .Summary(false))      
    .ColumnHidingEnabled(true)
    .Sorting(d => d.Mode(GridSortingMode.Single))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .GroupPanel(g => g.Visible(true))
    .ColumnChooser(f => f.Enabled(true).Mode(GridColumnChooserMode.Select))
    .SearchPanel(sp => sp.Visible(true).Width(240).Placeholder("Search..."))
    .HeaderFilter(h => h.Visible(true))
    .ShowColumnLines(true)
    .Columns(columns => {
        columns.AddFor(m => m.Date)
               .Caption("Date")
               .DataType(GridColumnDataType.Date)
               .Format("yyyy-MM-dd HH:mm")
               .Width(180);
        columns.AddFor(m => m.TransactionType)
               .Caption("Type");
        columns.AddFor(m => m.MedicationName)
               .Caption("Medication Name");
        columns.AddFor(m => m.Quantity)
               .Caption("Quantity")
               .DataType(GridColumnDataType.Number)
               .Alignment(HorizontalAlignment.Right);
        columns.AddFor(m => m.Price)
               .Caption("Price")
               .DataType(GridColumnDataType.Number)
               .Format("#,##0.00 UGX")
               .Alignment(HorizontalAlignment.Right);
    })
    // 1) Add a total summary for the Price column
    .Summary(s => s
        .TotalItems(items =>
        {
            items.AddFor(m => m.Price)
                .SummaryType(SummaryType.Sum)   // sum up all prices :contentReference[oaicite:0]{index=0}
                .DisplayFormat("Total: {0:#,##0.00 UGX}")
                //.ValueFormat(Format.Currency)
                .DisplayFormat("Total: {0} UGX");
        })
    )
    .Paging(p => p.PageSize(10))
    .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 5, 10, 20 })
        .ShowInfo(true)
    )
    // enable built‑in export to let toolbarPreparing hook work
    .Export(e => e.Enabled(true))
    .OnToolbarPreparing("onToolbarPreparing")
)
<!-- Summary Totals -->
<div class="mt-4">
    <p>
        <strong>Total Purchased:</strong>
        @Model.Where(t => t.TransactionType == "Purchase").Sum(t => t.Quantity)
    </p>
    <p>
        <strong>Total Sold:</strong>
        @Model.Where(t => t.TransactionType == "Sale").Sum(t => t.Quantity)
    </p>
    <p>
        <strong>Total Revenue:</strong>
        @Model.Where(t => t.TransactionType == "Sale").Sum(t => t.Price ?? 0).ToString("C")
    </p>
</div>

<p class="mt-3">
    @Html.ActionLink("Back to Home", "Index", "Home", null, new { @class = "btn btn-secondary" })
</p>

@section scripts {
    <!-- 1) Export libraries (after DevExtreme scripts) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.4.0/exceljs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.2/FileSaver.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <!-- Match your DevExtreme 22.2.x bundle version here -->
    <script src="https://cdn3.devexpress.com/jslib/22.2.7/js/dx.exceljs.js"></script>
    <script src="https://cdn3.devexpress.com/jslib/22.2.7/js/dx.pdf_exporter.js"></script>

    <script>
        // 2) Add Excel & PDF buttons to toolbar
        function onToolbarPreparing(e)
        {
            e.toolbarOptions.items = e.toolbarOptions.items.filter(item =>
                !(item.options && item.options.text === "Export all data to Excel")
            );

            var dataGrid = e.component;
            e.toolbarOptions.items.unshift(
                {
                    location: 'after',
                    widget: 'dxButton',
                    options: {
                        icon: 'exportxlsx',
                        text: 'Excel',
                        onClick: function () {
                            exportGridToExcel(dataGrid);
                        }
                    }
                },
                {
                    location: 'after',
                    widget: 'dxButton',
                    options: {
                        icon: 'exportpdf',
                        text: 'PDF',
                        onClick: function () {
                            exportGridToPdf(dataGrid);
                        }
                    }
                }
            );
        }

        // 3) Export helper: Excel
        function exportGridToExcel(grid) {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('Transaction Report');

            DevExpress.excelExporter.exportDataGrid({
                component: grid,
                worksheet: worksheet
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'TransactionReport.xlsx');
                });
            });
        }

        // 4) Export helper: PDF
        function exportGridToPdf(grid) {
            // Using jsPDF’s new ES module:
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            DevExpress.pdfExporter.exportDataGrid({
                jsPDFDocument: doc,
                component: grid
            }).then(function () {
                doc.save('TransactionReport.pdf');
            });
        }
    </script>
}
