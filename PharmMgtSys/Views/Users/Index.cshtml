@using DevExtreme.AspNet.Mvc
@using DevExtreme.AspNet.Mvc.Builders
@{
    ViewBag.Title = "Manage Users";
}

<h3>Manage Users</h3>

@(Html.DevExtreme().DataGrid()
    .ID("userGrid")
    .DataSource(ds => ds.Mvc()
        .Controller("Users")
        .LoadAction("GetUsers")
        .Key("Id")
        .LoadParams(new { _ = DateTime.Now.Ticks }) // Prevent caching
    )
    .RemoteOperations(true)
    .Sorting(d => d.Mode(GridSortingMode.Single))
    .SearchPanel(sp => sp.Visible(true).Width(240).Placeholder("Search..."))
    .ShowBorders(true)
    //.FocusedRowEnabled(true)
    .ShowColumnLines(true)
    .Columns(columns =>
    {
        columns.Add().DataField("Id").Visible(false);
        columns.Add().DataField("UserName").Caption("Username");
        columns.Add().DataField("Email");
        columns.Add().DataField("IsActive").Caption("Active");
        columns.Add().DataField("Roles").Caption("Roles")
            .CalculateCellValue("function(data) { return data.Roles.join(', '); }")
            .AllowEditing(false);
    })
    .Editing(e => e
        .AllowAdding(false)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
            .Title("Edit User")
            .ShowTitle(true)
            .Width(500)
            .Height(300)
        )
        .Form(f => f.Items(items =>
        {
            items.AddSimple().DataField("Id").Visible(false)
                .Editor(ed => ed.TextBox().Name("Id").ID("userId"));
            items.AddSimple().DataField("Email")
                .Editor(ed => ed.TextBox().ReadOnly(false).Name("Email").ID("userEmail"))
                .Label(l => l.Text("Email"))
                .ValidationRules(v => v.AddRequired().Message("Email is required"));
            items.AddSimple().DataField("IsActive")
                .Editor(ed => ed.CheckBox().Text("Active").Name("IsActive").ID("userIsActive"))
                .Label(l => l.Text("Active"));
        }))
    )
    .OnInitialized("function(e) { console.log('Grid initialized'); }")
    .OnRowUpdating("function(e) { console.log('Updating row with data:', e.newData, 'Key:', e.key); }")
    .OnRowUpdated("function(e) { console.log('Row updated:', e.data); }")
    .OnRowRemoving("function(e) { console.log('Deleting row with key:', e.key); }")
    .OnDataErrorOccurred("function(e) { console.error('Data error:', e.error); DevExpress.ui.notify('Error: ' + (e.error.message || 'Unknown error'), 'error', 5000); }")
)

<script>
    $(document).ready(function () {
        var grid = $("#userGrid").dxDataGrid("instance");
        if (!grid) {
            console.error("DataGrid instance not found - check configuration.");
            return;
        }
        console.log("DataGrid instance loaded successfully.");

        // Override the data source to handle totalCount and map key to id
        grid.option("dataSource", {
            load: function (loadOptions) {
                return $.ajax({
                    url: "/Users/GetUsers",
                    data: loadOptions,
                    type: "GET",
                    success: function (result) {
                        console.log("Load data:", result);
                        return {
                            data: result.data,
                            totalCount: result.totalCount
                        };
                    },
                    error: function (xhr, status, error) {
                        console.error("Load error:", status, error);
                    }
                });
            },
            update: function (key, values) {
                // Ensure key is a string
                var userId = typeof key === 'object' ? key.Id : key;
                return $.ajax({
                    url: "/Users/Update?id=" + encodeURIComponent(userId),
                    data: values,
                    type: "PUT",
                    beforeSend: function (xhr, settings) {
                        console.log("Update request:", settings.url, settings.data);
                    },
                    success: function (response) {
                        console.log("Update response:", response);
                        if (!response.success) {
                            throw new Error(response.errors.join(", "));
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Update error:", status, error);
                    }
                });
            },
            remove: function (key) {
                // Ensure key is a string
                var userId = typeof key === 'object' ? key.Id : key;
                return $.ajax({
                    url: "/Users/Delete?id=" + encodeURIComponent(userId),
                    type: "DELETE",
                    beforeSend: function (xhr, settings) {
                        console.log("Delete request:", settings.url);
                    },
                    success: function (response) {
                        console.log("Delete response:", response);
                        if (!response.success) {
                            throw new Error(response.errors.join(", "));
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Delete error:", status, error);
                    }
                });
            }
        });
    });
</script>